import java.awt.Image;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Locale;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.json.JSONObject;



/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Acer
 */
public class AplikasiCekCuaca extends javax.swing.JFrame {
    private ArrayList<String> favoriteCities = new ArrayList<>();  
    private static final String API_KEY = "e57367f6bf9f06154278b83d65a4a557"; // Replace with OpenWeatherMap API key
    private static final String CSV_FILE = "favorites.csv"; // CSV file path for saving/loading favorites
     private static final String FAVORITES_FILE = "favorites.txt"; // Path for saving favorite cities

    public AplikasiCekCuaca() {
        initComponents();
        loadFavorites();
        populateComboBox();
    tableModel.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {},
        new String [] {"Kota", "Suhu (°C)", "Cuaca", "Deskripsi"}
    )
   );     
         locationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] {
        "Pilih Kota Favorit", "Banjarbaru", "Banjarmasin", "Lampung", "Bandung", "Jakarta"
    }));
         locationComboBox.addActionListener(this::jComboBox1ActionPerformed);
    }
   private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {
        String selectedCity = (String) locationComboBox.getSelectedItem();
        if (!selectedCity.equals("Pilih Kota Favorit")) {
            cityInputField.setText(selectedCity);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        resultTemp = new javax.swing.JLabel();
        hariIni = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cityInputField = new javax.swing.JTextField();
        locationComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableModel = new javax.swing.JTable();
        cityInput = new javax.swing.JButton();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        Icon2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setFont(new java.awt.Font("Rockwell Extra Bold", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.insets = new java.awt.Insets(36, 10, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);

        resultTemp.setFont(new java.awt.Font("Agency FB", 1, 48)); // NOI18N
        resultTemp.setForeground(new java.awt.Color(255, 255, 255));
        resultTemp.setText("0°C");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        jPanel1.add(resultTemp, gridBagConstraints);

        hariIni.setFont(new java.awt.Font("Agency FB", 0, 36)); // NOI18N
        hariIni.setForeground(new java.awt.Color(255, 255, 255));
        hariIni.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(hariIni, gridBagConstraints);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/location.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(36, 22, 0, 0);
        jPanel1.add(jLabel6, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(46, 0, 0, 0);
        jPanel1.add(cityInputField, gridBagConstraints);

        locationComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel1.add(locationComboBox, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridLayout(1, 0));

        tableModel.setBackground(new java.awt.Color(51, 51, 51));
        tableModel.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        tableModel.setForeground(new java.awt.Color(255, 255, 255));
        tableModel.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableModel);

        jPanel2.add(jScrollPane1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 70;
        gridBagConstraints.ipady = -150;
        jPanel1.add(jPanel2, gridBagConstraints);

        cityInput.setText("Cari Tempat");
        cityInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cityInputActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 5;
        gridBagConstraints.gridy = 4;
        jPanel1.add(cityInput, gridBagConstraints);

        loadButton.setText("Simpan Favorite");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 4;
        jPanel1.add(loadButton, gridBagConstraints);

        saveButton.setText("Simpan (csv)");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 7;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        jPanel1.add(saveButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        jPanel1.add(Icon2, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
        saveWeatherDataToCSV();
    }//GEN-LAST:event_saveButtonActionPerformed

    private void cityInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cityInputActionPerformed
        // TODO add your handling code here:
checkWeather();
    }//GEN-LAST:event_cityInputActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadButtonActionPerformed
        // TODO add your handling code here:
        saveCurrentWeatherToFavorites();
    }//GEN-LAST:event_loadButtonActionPerformed

        private void saveCurrentWeatherToFavorites() {
        String city = cityInputField.getText().trim();
        if (city.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Masukkan nama kota untuk disimpan sebagai favorit!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        
        // Check if the city is already in favorites
        if (!favoriteCities.contains(city)) {
            favoriteCities.add(city);  // Add city to the favorites list
            locationComboBox.addItem(city);  // Add city to locationComboBox

            // Save city to favorites.txt
            try (BufferedWriter bw = new BufferedWriter(new FileWriter(FAVORITES_FILE, true))) {
                bw.write(city);
                bw.newLine();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Gagal menyimpan kota favorit.", "Error", JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }

            JOptionPane.showMessageDialog(this, "Kota berhasil disimpan ke favorit.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Kota sudah ada dalam daftar favorit.", "Info", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    private void checkWeather() {
        String city = cityInputField.getText().trim();
        if (city.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Masukkan nama kota!", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } try {
                  // URL API cuaca dengan parameter bahasa Indonesia
                  
        String encodedCity = URLEncoder.encode(city, StandardCharsets.UTF_8);
        String urlString = "http://api.openweathermap.org/data/2.5/weather?q=" + encodedCity + "&appid=" + API_KEY + "&units=metric&lang=id";

        URL url = new URL(urlString);
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod("GET");

        StringBuilder content;
            try ( // Baca respons API
                    BufferedReader in = new BufferedReader(new InputStreamReader(conn.getInputStream()))) {
                String inputLine;
                content = new StringBuilder();
                while ((inputLine = in.readLine()) != null) {
                    content.append(inputLine);
                }   }

        // Parsing JSON
        JSONObject jsonResponse = new JSONObject(content.toString());
        double temperature = jsonResponse.getJSONObject("main").getDouble("temp");
        String description = jsonResponse.getJSONArray("weather").getJSONObject(0).getString("description");
        String main = jsonResponse.getJSONArray("weather").getJSONObject(0).getString("main");
        String iconCode = jsonResponse.getJSONArray("weather").getJSONObject(0).getString("icon");
        // Membentuk URL untuk gambar ikon cuaca

        String iconUrl = "http://openweathermap.org/img/wn/" + iconCode + "@2x.png";
        URL urls = new URL(iconUrl);
        ImageIcon originalIcon = new ImageIcon(ImageIO.read(urls));
        // Tentukan ukuran maksimum untuk ikon
        int maxWidth = 50; // Ganti dengan lebar maksimum yang diinginkan
        int maxHeight = 50; // Ganti dengan tinggi maksimum yang diinginkan
        // Ubah ukuran ikon
        Image img = originalIcon.getImage();
        Image scaledImg = img.getScaledInstance(maxWidth, maxHeight, Image.SCALE_SMOOTH);
        Icon2.setIcon(new ImageIcon(scaledImg)); // Set ikon cuaca
            resultTemp.setText(temperature + "°C");
            jLabel1.setText(city.toUpperCase());
            LocalDate today = LocalDate.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE", new Locale("id", "ID")); // Indonesian Locale
            String dayOfWeek = today.format(formatter).toUpperCase(); // Convert to uppercase for "SENIN" format
            hariIni.setText(dayOfWeek);
            
            DefaultTableModel model = (DefaultTableModel) tableModel.getModel();
            model.addRow(new Object[]{city, temperature,main ,description});
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Gagal mengambil data cuaca!", "Error", JOptionPane.ERROR_MESSAGE);
        } catch (org.json.JSONException ex) {
            JOptionPane.showMessageDialog(this, "Error parsing weather data. The response format may have changed.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void loadFavorites() {
        File file = new File("favorites.txt");
        if (file.exists()) {
            try (BufferedReader br = new BufferedReader(new FileReader(file))) {
                String line;
                while ((line = br.readLine()) != null) {
                    favoriteCities.add(line);
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    private void populateComboBox() {
        for (String city : favoriteCities) {
            locationComboBox.addItem(city);
        }
    }

    
    private void saveWeatherDataToCSV() {
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(CSV_FILE))) {
            DefaultTableModel model = (DefaultTableModel) tableModel.getModel();
            int rowCount = model.getRowCount();
            int colCount = model.getColumnCount();

            // Write header
            for (int i = 0; i < colCount; i++) {
                bw.write(model.getColumnName(i));
                if (i < colCount - 1) bw.write(",");
            }
            bw.newLine();

            // Write data rows
            for (int i = 0; i < rowCount; i++) {
                for (int j = 0; j < colCount; j++) {
                    bw.write(model.getValueAt(i, j).toString());
                    if (j < colCount - 1) bw.write(",");
                }
                bw.newLine();
            }

            JOptionPane.showMessageDialog(this, "Data cuaca berhasil disimpan ke CSV.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "Gagal menyimpan data ke CSV.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AplikasiCekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AplikasiCekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AplikasiCekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AplikasiCekCuaca.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AplikasiCekCuaca().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Icon2;
    private javax.swing.JButton cityInput;
    private javax.swing.JTextField cityInputField;
    private javax.swing.JLabel hariIni;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton loadButton;
    private javax.swing.JComboBox<String> locationComboBox;
    private javax.swing.JLabel resultTemp;
    private javax.swing.JButton saveButton;
    private javax.swing.JTable tableModel;
    // End of variables declaration//GEN-END:variables
}
